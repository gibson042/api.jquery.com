<?xml version="1.0"?>
<entry type="method" name="jQuery.when" return="Promise">
  <title>jQuery.when()</title>
  <signature>
    <added>1.5</added>
    <argument name="value" type="Anything" optional="true">
      <desc>A Promise-like object to resolve a Deferred object, or any value to encapsulate within a Deferred object.</desc>
    </argument>
  </signature>
  <signature>
    <added>1.5</added>
    <argument name="values" type="Anything">
    <desc>Two or values to resolve or encapsulate with Deferred objects for <code>Promise.all</code>-like fulfillment aggregation.</desc>
    </argument>
  </signature>
  <desc>Provides a way to execute callback functions based on one or more objects, usually <a href="/category/deferred-object/">Deferred</a> objects that represent asynchronous events.</desc>
  <longdesc>
    <p>If no arguments are provided, <code>jQuery.when()</code> will return a resolved Promise.</p>
    <pre><code>
$.when().then(function( x ) {
  alert( "I fired immediately" );
});
    </code></pre>
    <p>If a single argument is provided and it is a Promise or has a <code>then</code> method, <code>jQuery.when()</code> will return a Promise that will resolve or reject identically to the argument.</p>
    <pre><code>
$.when( $.ajax( "test.aspx" ) ).then(function( data, textStatus, jqXHR ) {
  alert( jqXHR.status ); // Alerts 200
});
    </code></pre>
    <p>If any other single argument is provided, <code>jQuery.when()</code> will return a Promise that is resolved to it.</p>
    <pre><code>
$.when( { testing: 123 } ).done(function( x ) {
  alert( x.testing ); // Alerts "123"
});
    </code></pre>
    <p>If more than one argument is provided, <code>jQuery.when()</code> will return the Promise from a new "master" Deferred object that tracks their aggregate state (upgrading each to a Deferred object as in the single-argument case where necessary). The master Deferred will resolve as soon as all subordinates resolve, or reject as soon as one is rejected. If the master Deferred is resolved, the resolution context and values of each subordinate are preserved in its resolution context (an array of all the resolution contexts) and resolution values (the resolution values of each subordinate appear as a single value, with multi-valued resolutions theirselves becoming arrays), each preserving the order in which the subordinate was provided to <code>jQuery.when()</code>. For example:</p>
    <pre><code>
var d1 = $.Deferred();
var d2 = $.Deferred();
var d3 = $.Deferred();

$.when( d1, d2 ).done(function ( v1, v2, v3 ) {
    console.log( v1 );   // "Fish"
    console.log( v2 );   // ["Pizza", "Pie"]
    console.log( v3 );   // undefined
    console.log( this ); // [{ where: "Ocean" }, undefined, undefined]
});

d1.resolveWith( { where: "Ocean" }, [ "Fish" ] );
d2.resolve( "Pizza", "Pie" );
d3.resolve();
    </code></pre>
    <p>If more than one argument is provided and one of the arguments is rejected, <code>jQuery.when()</code> immediately rejects with corresponding context and values. Note that some of the subordinates may still be unresolved at that point. For example:</p>
    <pre><code>
var d1 = $.Deferred();
var d2 = $.Deferred();
var d3 = $.Deferred();

$.when( d1, d2 ).fail(function ( rejection ) {
    console.log( rejection ); // "Pie"
    console.log( this );      // { type: "Pizza" }
});

d1.resolve( "Fish" );
d2.rejectWith( { type: "Pizza" }, [ "Pie" ] );
d3.resolve();
    </code></pre>
    <p>Regardless of provided arguments, methods of the returned Promise object can be called to attach callbacks, such as <a href="/deferred.then/"><code>deferred.then</code></a>. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called.</p>
  </longdesc>
  <example>
    <desc>Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).</desc>
    <code><![CDATA[
$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {
  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.
  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]
  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"
  if ( /Whip It/.test( dataÂ ) ) {
    alert( "We got what we came for!" );
  }
});
]]></code>
  </example>
  <example>
    <desc>Execute the function <code>myFunc</code> when both ajax requests are successful, or <code>myFailure</code> if either one has an error.</desc>
    <code><![CDATA[
$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )
  .then( myFunc, myFailure );
]]></code>
  </example>
  <category slug="core"/>
  <category slug="deferred-object"/>
  <category slug="version/1.5"/>
</entry>
